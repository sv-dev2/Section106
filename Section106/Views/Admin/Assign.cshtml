
@model Section106.Models.Models.RequestVM
@using Section106.Models
@using Section106.Models.Enums

@{
    string respondDateStr = null;
    if (Model.RequestAssignment != null)
    {
        respondDateStr = Model.RequestAssignment.RespondDateStr;
    }
}
@{
    bool IsReqAddInfo = false;
    if (Model.RequestResponse != null)
    {
        if (User.IsInRole("Architectural"))
        {
            IsReqAddInfo = Model.RequestResponse.ArchitectResponse == 3 ? true : false;
        }
        else if (User.IsInRole("Archaeology"))
        {
            IsReqAddInfo = Model.RequestResponse.ArchaelogicalResponse == 3 ? true : false;
        }
    }
}
<div class="row form-group">
    <div class="col-md-12">
        <div class="dashboard-title">
            <h3>Accept or Return Request</h3>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-8 text-left">
        <div class="back_to_list">
            <ul class="list-inline">
                <li><a class="btn btn-default" href="~/Admin/Index">Back To List</a></li>
                <li><a class="btn btn-default" onclick="CoverPage()">Cover Page</a></li>
                <li><span class="glyphicon glyphicon-print pointer" title="Print Form" onclick="printForm()"></span></li>
            </ul>
        </div>

    </div>
    <div class="col-md-4 text-right">
    </div>
</div>

<div class="row margin-top30 form-horizontal">
    <div class="col-md-12">
        @using (Html.BeginForm("SaveRequestAssignment", "Admin", FormMethod.Post, new { role = "form" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(m => m.RequestId)
            @Html.HiddenFor(m => m.ProjectCountyId)
            @Html.HiddenFor(m => m.Status)
            @Html.HiddenFor(m => m.ProjectDate)
            @Html.HiddenFor(m => m.IsRequestAssignedAlready)
            @Html.HiddenFor(m => m.SubmittingContact.CountyId)
            @Html.HiddenFor(m => m.ApplicantContact.CountyId)
            @Html.HiddenFor(m => m.SubmittingContact.StateId, new { @class = "SubmittingStateId" })
            @Html.Hidden("AttachmentList")

            <div class="row form-group">
                <div class="col-md-12">
                    <div class="section-box">
                        <h2>Project Name and Location</h2>

                        <div class="row form-group">
                            <div class="col-md-4">
                                <div class="section-col-box-h265">
                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.ProjectLogNumber)
                                            @Html.EditorFor(m => m.ProjectLogNumber, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        </div>
                                    </div>
                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.ProjectDateStr)
                                            @Html.EditorFor(m => m.ProjectDateStr, new { htmlAttributes = new { @class = "form-control", @type = "date", @readonly = true } })
                                        </div>
                                    </div>
                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.ProjectName)
                                            @Html.EditorFor(m => m.ProjectName, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="section-col-box-h265">
                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.ProjectAddress1)
                                            @Html.EditorFor(m => m.ProjectAddress1, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        </div>
                                    </div>
                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.ProjectAddress2)
                                            @Html.EditorFor(m => m.ProjectAddress2, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        </div>
                                    </div>
                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.ProjectCountyId)
                                            @Html.DropDownListFor(m => m.ProjectCountyId, new SelectList(Model.Counties, "Value", "Text"), "Select County", new { @class = "form-control", @disabled = true })
                                            @Html.ValidationMessageFor(m => m.ProjectCountyId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                            </div>
                            <div class="col-md-4">
                                <div class="section-col-box-h265">
                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.ProjectCityId)
                                            @Html.DropDownListFor(m => m.ProjectCityId, new SelectList(Model.Cities, "Value", "Text"), "Select City", new { @class = "form-control", @disabled = true })
                                        </div>
                                    </div>

                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.ProjectZip)
                                            @Html.EditorFor(m => m.ProjectZip, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        </div>
                                    </div>

                                </div>

                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row form-group">
                <div class="col-md-12">
                    <div class="section-box">
                        <h2>Submitting Contact</h2>

                        <div class="row form-group">
                            <div class="col-md-4">
                                <div class="section-col-box">
                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.SubmittingContact.Name)
                                            @Html.EditorFor(m => m.SubmittingContact.Name, new { htmlAttributes = new { @class = "form-control SubmittingName", @readonly = true } })
                                        </div>
                                    </div>
                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.SubmittingContact.Company)
                                            @Html.EditorFor(m => m.SubmittingContact.Company, new { htmlAttributes = new { @class = "form-control SubmittingCompany", @readonly = true } })
                                        </div>
                                    </div>
                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.SubmittingContact.Email)
                                            @Html.EditorFor(m => m.SubmittingContact.Email, new { htmlAttributes = new { @class = "form-control SubmittingEmail", @readonly = true } })
                                        </div>
                                    </div>
                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.SubmittingContact.CountyName)
                                            @Html.EditorFor(m => m.SubmittingContact.CountyName, new { htmlAttributes = new { @class = "form-control SubmittingCity", @readonly = true } })
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="section-col-box">
                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.SubmittingContact.Address1)
                                            @Html.EditorFor(m => m.SubmittingContact.Address1, new { htmlAttributes = new { @class = "form-control SubmittingAddress1", @readonly = true } })
                                        </div>
                                    </div>
                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.SubmittingContact.Address2)
                                            @Html.EditorFor(m => m.SubmittingContact.Address2, new { htmlAttributes = new { @class = "form-control SubmittingAddress2", @readonly = true } })
                                        </div>
                                    </div>
                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.SubmittingContact.StateName)
                                            @Html.EditorFor(m => m.SubmittingContact.StateName, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        </div>
                                    </div>
                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.SubmittingContact.City)
                                            @Html.EditorFor(m => m.SubmittingContact.City, new { htmlAttributes = new { @class = "form-control SubmittingCity", @readonly = true } })
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-4">
                                <div class="section-col-box">

                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.SubmittingContact.Zip)
                                            @Html.EditorFor(m => m.SubmittingContact.Zip, new { htmlAttributes = new { @class = "form-control SubmittingZip", @readonly = true } })
                                        </div>
                                    </div>

                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.SubmittingContact.MobileNumber)
                                            @Html.EditorFor(m => m.SubmittingContact.MobileNumber, new { htmlAttributes = new { @class = "form-control SubmittingMobileNumber", @readonly = true } })
                                        </div>
                                    </div>

                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.SubmittingContact.OfficeNumber)
                                            @Html.EditorFor(m => m.SubmittingContact.OfficeNumber, new { htmlAttributes = new { @class = "form-control SubmittingOfficeNumber", @readonly = true } })
                                        </div>
                                    </div>

                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.SubmittingContact.Fax)
                                            @Html.EditorFor(m => m.SubmittingContact.Fax, new { htmlAttributes = new { @class = "form-control SubmittingFax", @readonly = true } })
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row form-group applicantBox">
                <div class="col-md-12">
                    <div class="section-box">
                        <h2>Applicant Contact</h2>

                        <div class="row form-group">
                            <div class="col-md-4">
                                <div class="section-col-box">
                                    <br />
                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            <label>
                                                <span class="chk_box">@Html.CheckBoxFor(m => m.IsApplicantSameAsSubmitting, new { @class = "request_chk", @onchange = "setSameApplicantAddress()", @disabled = true })</span>
                                                <span class="chk_txt">Check if same as above</span>
                                            </label>
                                        </div>
                                    </div>

                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.ApplicantContact.Name)
                                            @Html.EditorFor(m => m.ApplicantContact.Name, new { htmlAttributes = new { @class = "form-control ApplicantName", @readonly = true } })
                                        </div>
                                    </div>

                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.ApplicantContact.Company)
                                            @Html.EditorFor(m => m.ApplicantContact.Company, new { htmlAttributes = new { @class = "form-control ApplicantCompany", @readonly = true } })
                                        </div>
                                    </div>

                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.ApplicantContact.Email)
                                            @Html.EditorFor(m => m.ApplicantContact.Email, new { htmlAttributes = new { @class = "form-control ApplicantEmail", @readonly = true } })
                                        </div>
                                    </div>
                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.ApplicantContact.CountyId)
                                            @Html.DropDownListFor(m => m.ApplicantContact.CountyId, new SelectList(Model.Counties, "Value", "Text"), "Select State", new { @class = "form-control ApplicantStateId", @disabled = true })
                                        </div>
                                    </div>

                                </div>
                            </div>

                            <div class="col-md-4">
                                <div class="section-col-box">
                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.ApplicantContact.Address1)
                                            @Html.EditorFor(m => m.ApplicantContact.Address1, new { htmlAttributes = new { @class = "form-control ApplicantAddress1", @readonly = true } })
                                        </div>
                                    </div>

                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.ApplicantContact.Address2)
                                            @Html.EditorFor(m => m.ApplicantContact.Address2, new { htmlAttributes = new { @class = "form-control ApplicantAddress2", @readonly = true } })
                                        </div>
                                    </div>

                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.ApplicantContact.StateId)
                                            @Html.DropDownListFor(m => m.ApplicantContact.StateId, new SelectList(Model.States, "Value", "Text"), "Select State", new { @class = "form-control ApplicantStateId", @disabled = true })
                                        </div>
                                    </div>

                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.ApplicantContact.City)
                                            @Html.EditorFor(m => m.ApplicantContact.City, new { htmlAttributes = new { @class = "form-control ApplicantCity", @readonly = true } })
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-4">
                                <div class="section-col-box">
                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.ApplicantContact.Zip)
                                            <span class="text-danger">*</span>
                                            @Html.EditorFor(m => m.ApplicantContact.Zip, new { htmlAttributes = new { @class = "form-control ApplicantZip", @readonly = true } })
                                            @Html.ValidationMessageFor(m => m.ApplicantContact.Zip, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.ApplicantContact.OfficeNumber)
                                            <span class="text-danger">*</span>
                                            @Html.EditorFor(m => m.ApplicantContact.OfficeNumber, new { htmlAttributes = new { @class = "form-control ApplicantOfficeNumber", @readonly = true } })
                                            @Html.ValidationMessageFor(m => m.ApplicantContact.OfficeNumber, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.ApplicantContact.MobileNumber)
                                            @Html.EditorFor(m => m.ApplicantContact.MobileNumber, new { htmlAttributes = new { @class = "form-control ApplicantMobileNumber", @readonly = true } })
                                        </div>
                                    </div>



                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.ApplicantContact.Fax)
                                            @Html.EditorFor(m => m.ApplicantContact.Fax, new { htmlAttributes = new { @class = "form-control ApplicantFax", @readonly = true } })
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row form-group">
                <div class="col-md-12">
                    <div class="section-box">
                        <h2>Project Description</h2>

                        <div class="row form-group">
                            <div class="col-md-12">
                                <div class="section-col-box-noheight">
                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.ProjectDescription)
                                            @Html.TextAreaFor(m => m.ProjectDescription, 10, 0, new { @class = "form-control", @readonly = true })
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row form-group">
                <div class="col-md-12">
                    <div class="section-box">
                        <div class="row form-group">
                            <div class="col-md-4">
                                <div class="section-col-box">
                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.Longitude)
                                            @Html.EditorFor(m => m.Longitude, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        </div>
                                    </div>

                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.Latitude)
                                            @Html.EditorFor(m => m.Latitude, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        </div>
                                    </div>

                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.TownShip)
                                            @Html.EditorFor(m => m.TownShip, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        </div>
                                    </div>

                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.Range)
                                            @Html.EditorFor(m => m.Range, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        </div>
                                    </div>

                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.Section)
                                            @Html.EditorFor(m => m.Section, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-4">
                                <div class="section-col-box">
                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            <label>Location (Check all that apply)</label>
                                        </div>
                                    </div>

                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            <label>
                                                <span class="chk_box">@Html.CheckBoxFor(m => m.IsFederalProperty, new { @class = "request_chk", @disabled = true })</span>
                                                <span class="chk_txt">Federal Property</span>
                                            </label>
                                        </div>
                                    </div>

                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            <label>
                                                <span class="chk_box">@Html.CheckBoxFor(m => m.IsStateProperty, new { @class = "request_chk", @disabled = true })</span>
                                                <span class="chk_txt">State Property</span>
                                            </label>
                                        </div>
                                    </div>

                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            <label>
                                                <span class="chk_box">@Html.CheckBoxFor(m => m.IsMunicipalProperty, new { @class = "request_chk", @disabled = true })</span>
                                                <span class="chk_txt">Municipal Property</span>
                                            </label>
                                        </div>
                                    </div>

                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            <label>
                                                <span class="chk_box">@Html.CheckBoxFor(m => m.IsPrivateProperty, new { @class = "request_chk", @disabled = true })</span>
                                                <span class="chk_txt">Private Property</span>
                                            </label>
                                        </div>
                                    </div>

                                </div>

                            </div>

                            <div class="col-md-4">
                                <div class="section-col-box">
                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.AgencyId)
                                            @Html.DropDownListFor(m => m.AgencyId, new SelectList(Model.Agencies, "Value", "Text"), "Select Agency", new { @class = "form-control", @disabled = true })
                                        </div>
                                    </div>

                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.AgencyProjectNumber)
                                            @Html.EditorFor(m => m.AgencyProjectNumber, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row form-group">
                <div class="col-md-12">
                    <div class="section-box">
                        <h2>Proposed Work</h2>
                        <div class="row form-group">
                            <div class="col-md-4">
                                <div class="section-col-box">
                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            <label>Project includes (Check all that apply)</label>
                                        </div>
                                    </div>

                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            <label>
                                                <span class="chk_box">@Html.CheckBoxFor(m => m.IsConstructionExcavation, new { @class = "request_chk", @disabled = true })</span>
                                                <span class="chk_txt">Construction / Excavation</span>
                                            </label>
                                        </div>
                                    </div>

                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            <label>
                                                <span class="chk_box">@Html.CheckBoxFor(m => m.IsRehabilitation, new { @class = "request_chk", @disabled = true })</span>
                                                <span class="chk_txt">Rehabilitation</span>
                                            </label>
                                        </div>
                                    </div>

                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            <label>
                                                <span class="chk_box">@Html.CheckBoxFor(m => m.IsDemolition, new { @class = "request_chk", @disabled = true })</span>
                                                <span class="chk_txt">Demolition</span>
                                            </label>
                                        </div>
                                    </div>

                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            <label>
                                                <span class="chk_box">@Html.CheckBoxFor(m => m.IsSaleOrTransfer, new { @class = "request_chk", @disabled = true })</span>
                                                <span class="chk_txt">Sale / Transfer</span>
                                            </label>
                                        </div>
                                    </div>

                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            <label>
                                                <span class="chk_box">@Html.CheckBoxFor(m => m.IsNonConstructionLoan, new { @class = "request_chk", @disabled = true })</span>
                                                <span class="chk_txt">Non Construction Loan</span>
                                            </label>
                                        </div>
                                    </div>

                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            <label>
                                                <span class="chk_box">@Html.CheckBoxFor(m => m.IsOther, new { @class = "request_chk", @disabled = true })</span>
                                                <span class="chk_txt">Other</span>
                                            </label>
                                        </div>
                                    </div>

                                    <div class="row form-group otherDesc">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.OtherDescription)
                                            @Html.EditorFor(m => m.OtherDescription, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        </div>
                                    </div>

                                </div>
                            </div>

                            <div class="col-md-4">
                                <div class="section-col-box">
                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.TotalProjectArea)
                                            @Html.EditorFor(m => m.TotalProjectArea, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        </div>
                                    </div>

                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.TotalGroundDisturbance)
                                            @Html.EditorFor(m => m.TotalGroundDisturbance, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                                        </div>
                                    </div>
                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.IsMississippiLandmarks)
                                            <label class="radio_container">
                                                <span class="chk_box radio_radius">@Html.RadioButtonFor(m => m.IsMississippiLandmarks, true, new { @class = "request_chk", @disabled = true })</span>
                                                <span class="radio_txt">Yes</span>
                                            </label>

                                            <label class="radio_container">
                                                <span class="chk_box radio_radius">@Html.RadioButtonFor(m => m.IsMississippiLandmarks, false, new { @class = "request_chk", @disabled = true })</span>
                                                <span class="radio_txt">No</span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-4">
                                <div class="section-col-box">
                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.IsHistoricOrGovtProperty)
                                            <label class="radio_container">
                                                <span class="chk_box radio_radius">@Html.RadioButtonFor(m => m.IsHistoricOrGovtProperty, 1, new { @class = "request_chk", @disabled = true })</span>
                                                <span class="radio_txt">Yes</span>
                                            </label>

                                            <label class="radio_container">
                                                <span class="chk_box radio_radius">@Html.RadioButtonFor(m => m.IsHistoricOrGovtProperty, 2, new { @class = "request_chk", @disabled = true })</span>
                                                <span class="radio_txt">No</span>
                                            </label>

                                            <label class="radio_container">
                                                <span class="chk_box radio_radius">@Html.RadioButtonFor(m => m.IsHistoricOrGovtProperty, 0, new { @class = "request_chk", @disabled = true })</span>
                                                <span class="radio_txt">Unsure</span>
                                            </label>
                                        </div>
                                    </div>

                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.HistoricPropertyName)
                                            @Html.TextBoxFor(m => m.HistoricPropertyName, new { @class = "form-control", @readonly = true })
                                        </div>
                                    </div>

                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            <label>
                                                <span class="chk_box">@Html.CheckBoxFor(m => m.IsOldStructure, new { @class = "request_chk", @disabled = true })</span>
                                                <span class="chk_txt">Check if buildings or structures in the project area are 50 years or older</span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            @*<div class="row form-group">
                    <div class="col-md-12">
                        <div class="section-box">
                            <h2>Attachments</h2>

                            <div class="row form-group">
                                <div class="col-md-12">
                                    <div class="section-col-box-noheight">
                                        <div class="row form-group">
                                            <div class="col-md-12">
                                                <span>Include the following information with this form.</span>
                                            </div>
                                        </div>

                                        <div class="row form-group">
                                            <div class="col-md-12">
                                                <ul class="attached_docs">
                                                    <li>Map - 7.5' USGS topograhic quad showing project boundary and Area of Potential Effect.</li>
                                                    <li>Definition / Scope - Describe the project, including any ground disturbance and previous land use.</li>
                                                    <li>Site Plans / Drawings - Indicate the location and age, if known, of all structures in the project area.</li>
                                                    <li>Photographs - Attach photos showing the project site, including images of all structures keyed to a site plan.</li>
                                                </ul>
                                            </div>
                                        </div>

                                        <div class="row form-group">
                                            <div class="col-md-12">
                                                <span>-OR-</span>
                                            </div>
                                        </div>

                                        <div class="row form-group">
                                            <div class="col-md-12">
                                                <label>
                                                    <span class="chk_box">@Html.CheckBoxFor(m => m.IsDocumentSentViaEmail, new { @class = "request_chk", @disabled = true })</span>
                                                    <span class="chk_txt">Documents will be sent via mail</span>
                                                </label>
                                            </div>

                                            <div class="col-md-12" style="padding-left: 50px;">
                                                Mail to:<br /><br />
                                                Mississippi Department of archives and History<br />
                                                Attn: Review and Compliance Officer<br />
                                                PO Box 571<br />
                                                Jackson, MS  39205
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>*@

            @*<div class="row form-group attachmentBox">
                    <div class="col-md-12">
                        <div class="section-box">
                            <div class="row form-group">
                                <div class="col-md-12">
                                    <div class="section-col-box-noheight">

                                        <div class="row form-group">
                                            <div class="col-md-6">
                                                <h4>Attachments</h4>
                                            </div>
                                            <div class="col-md-6 text-right">
                                                @*<button type="button" class="btn btn-info" disabled>Add</button>
                                            </div>
                                        </div>

                                        <div class="row form-group">
                                            <div class="col-md-12">
                                                <div class="table-responsive">
                                                    <table class="table table-striped">
                                                        <thead>
                                                            <tr>
                                                                <th>File Type</th>
                                                                <th>File Name</th>
                                                                <th>Comment</th>
                                                                <th class="action_100">Action</th>
                                                            </tr>
                                                        </thead>
                                                        <tbody id="attachmentBody"></tbody>
                                                    </table>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>*@

            <div class="row form-group correspondenceBox">
                <div class="col-md-12">
                    <div class="section-box">
                        <h2>Correspondence and Status</h2>
                        <div class="row form-group">
                            <div class="col-md-12">
                                <div class="section-col-box-noheight">

                                    <div class="row form-group">
                                        <div class="col-md-6">
                                            <h4>Letters</h4>
                                        </div>
                                        <div class="col-md-6 text-right">
                                            @if (Model.Status != Convert.ToInt32(RequestStatus.Returned))
                                            {
                                                <button type="button" class="btn btn-info" onclick="showCorrespondenceModal()">New Letter</button>
                                            }
                                        </div>
                                    </div>

                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            <div class="table-responsive">
                                                <table class="table table-striped">
                                                    <thead>
                                                        <tr>
                                                            <th>Letter Type</th>
                                                            <th>Date</th>
                                                            <th class="action_100">Action</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="correspondenceBody"></tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row form-group">
                <div class="col-md-12">
                    <div class="section-box">
                        <h2>Assignments</h2>
                        <div class="row form-group">

                            <div class="col-md-4">
                                <div class="section-col-box-h195">
                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            <label>
                                                <span class="chk_box">@Html.CheckBoxFor(m => m.RequestAssignment.IsAccept, new { @class = "request_chk acceptAndBegin", @onchange = "setRespondDate()" })</span>
                                                <span class="chk_txt">Accept and Begin</span>
                                            </label>
                                        </div>
                                    </div>

                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            <label>
                                                <span class="chk_box radio_radius">@Html.RadioButtonFor(m => m.RequestAssignment.FederalOrState, 1, new { @class = "request_chk federalOrState" })</span>
                                                <span class="radio_txt">Federal 106</span>
                                            </label>
                                            <br />
                                            <label>
                                                <span class="chk_box radio_radius">@Html.RadioButtonFor(m => m.RequestAssignment.FederalOrState, 2, new { @class = "request_chk federalOrState" })</span>
                                                <span class="radio_txt">State / Local</span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-4">
                                <div class="section-col-box-h195">
                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.RequestAssignment.ProjectNumber)
                                            @Html.TextBoxFor(m => m.RequestAssignment.ProjectNumber, new { @class = "form-control assign_projectNumber" })
                                            @Html.ValidationMessageFor(m => m.RequestAssignment.ProjectNumber, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            @Html.LabelFor(m => m.RequestAssignment.RespondDate)
                                            @Html.TextBoxFor(m => m.RequestAssignment.RespondDate, new { @class = "form-control respondDate", @type = "date" })
                                            @Html.ValidationMessageFor(m => m.RequestAssignment.RespondDate, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-4">
                                <div class="section-col-box-h195">
                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            <label>
                                                <span class="chk_box">@Html.CheckBoxFor(m => m.RequestAssignment.IsAssignToArchitect, new { @class = "request_chk isAssignToArchitect" })</span>
                                                <span class="chk_txt">Assign to Architectural History</span>
                                            </label>
                                        </div>
                                    </div>

                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            <label>
                                                <span class="chk_box">@Html.CheckBoxFor(m => m.RequestAssignment.IsAssignToArchaelogical, new { @class = "request_chk isAssignToArchaelogical" })</span>
                                                <span class="chk_txt">Assign to Archaelogy</span>
                                            </label>
                                        </div>
                                    </div>

                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            <label>
                                                <span class="chk_box">@Html.CheckBoxFor(m => m.RequestAssignment.IsAssignToTechnical, new { @class = "request_chk isAssignToTechnical" })</span>
                                                <span class="chk_txt">Assign to Technical Preservation Services</span>
                                            </label>
                                        </div>
                                    </div>
                                    <div class="row form-group">
                                        <div class="col-md-12">
                                            <label>
                                                <span class="chk_box">@Html.CheckBoxFor(m => m.RequestAssignment.IsAssignToLandMarks, new { @class = "request_chk isAssignToTechnical" })</span>
                                                <span class="chk_txt">Assign to Landmarks</span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row form-group">
                <div class="col-md-12">
                    <div class="section-box">
                        <h2>Reviewers Response</h2>
                        <div class="row form-group">

                            <div class="col-md-4">
                                <div class="section-col-box-h265">

                                    <div class="row form-group">
                                        <div class="col-md-12 text-center">
                                            <h4>Architectural Response</h4>
                                        </div>
                                    </div>
                                    <hr />

                                    @if (Model.RequestAssignment!=null && Model.RequestAssignment.IsAssignToArchitect)
                                    {
                                        <div class="row form-group">
                                            <div class="col-md-3">
                                                <span>Status</span>
                                            </div>
                                            <div class="col-md-9">
                                                @if (Model.RequestAssignment.ArchitechStatus == ReviewerRequestStatus.Pending)
                                                {
                                                    <label class="label label-info">Pending</label>
                                                }
                                                else if (Model.RequestAssignment.ArchitechStatus == ReviewerRequestStatus.Approved)
                                                {
                                                    <label class="label label-success">Completed</label>
                                                }
                                                else if (Model.RequestAssignment.ArchitechStatus == ReviewerRequestStatus.Rejected)
                                                {
                                                    <label class="label label-danger">Rejected</label>
                                                }
                                                else if (Model.RequestAssignment.ArchitechStatus == ReviewerRequestStatus.MoreInfoRequired)
                                                {
                                                    <label class="label label-primary">More Information Required</label>
                                                }
                                            </div>
                                        </div>

                                        if (!(Model.RequestAssignment.ArchitechStatus == ReviewerRequestStatus.Pending))
                                        {
                                            <div class="row form-group">
                                                <div class="col-md-12">
                                                    <label>Comment</label>
                                                    <div><span>@Model.RequestResponse.ArchitectComment</span></div>
                                                </div>
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <div class="row form-group">
                                            <div class="col-md-12 text-center">
                                                <label class="label label-primary">Not Assigned</label>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>

                            <div class="col-md-4">
                                <div class="section-col-box-h265">

                                    <div class="row form-group">
                                        <div class="col-md-12 text-center">
                                            <h4>Archaeology Response</h4>
                                        </div>
                                    </div>
                                    <hr />

                                    @if (Model.RequestAssignment!=null && Model.RequestAssignment.IsAssignToArchaelogical)
                                    {
                                        <div class="row form-group">
                                            <div class="col-md-3">
                                                <span>Status</span>
                                            </div>
                                            <div class="col-md-9">
                                                @if (Model.RequestAssignment.ArchaelogicalStatus == ReviewerRequestStatus.Pending)
                                                {
                                                    <label class="label label-info">Pending</label>
                                                }
                                                else if (Model.RequestAssignment.ArchaelogicalStatus == ReviewerRequestStatus.Approved)
                                                {
                                                    <label class="label label-success">Completed</label>
                                                }
                                                else if (Model.RequestAssignment.ArchaelogicalStatus == ReviewerRequestStatus.Rejected)
                                                {
                                                    <label class="label label-danger">Rejected</label>
                                                }
                                                else if (Model.RequestAssignment.ArchaelogicalStatus == ReviewerRequestStatus.MoreInfoRequired)
                                                {
                                                    <label class="label label-primary">More Information Required</label>
                                                }
                                                else if (Model.RequestAssignment.ArchaelogicalStatus == ReviewerRequestStatus.SurveyRequired)
                                                {
                                                    <label class="label label-primary">Survey Required</label>
                                                }
                                            </div>
                                        </div>
                                        if (!(Model.RequestAssignment.ArchaelogicalStatus == ReviewerRequestStatus.Pending))
                                        {
                                            <div class="row form-group">
                                                <div class="col-md-12">
                                                    <label>Comment</label>
                                                    <div><span>@Model.RequestResponse.ArchaelogicalComment</span></div>
                                                </div>
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <div class="row form-group">
                                            <div class="col-md-12 text-center">
                                                <label class="label label-primary">Not Assigned</label>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>

                            <div class="col-md-4">
                                <div class="section-col-box-h265">

                                    <div class="row form-group">
                                        <div class="col-md-12 text-center">
                                            <h4>Technical Assistance Response</h4>
                                        </div>
                                    </div>
                                    <hr />

                                    @if (Model.RequestAssignment != null && Model.RequestAssignment.IsAssignToTechnical)
                                    {
                                        <div class="row form-group">
                                            <div class="col-md-3">
                                                <span>Status</span>
                                            </div>
                                            <div class="col-md-9">
                                                @if (Model.RequestAssignment.TechnicalStatus == ReviewerRequestStatus.Pending)
                                                {
                                                    <label class="label label-info">Pending</label>
                                                }
                                                else if (Model.RequestAssignment.TechnicalStatus == ReviewerRequestStatus.Approved)
                                                {
                                                    <label class="label label-success">Completed</label>
                                                }
                                                else if (Model.RequestAssignment.TechnicalStatus == ReviewerRequestStatus.Rejected)
                                                {
                                                    <label class="label label-danger">Rejected</label>
                                                }
                                                else if (Model.RequestAssignment.TechnicalStatus == ReviewerRequestStatus.MoreInfoRequired)
                                                {
                                                    <label class="label label-primary">More Information Required</label>
                                                }
                                            </div>
                                        </div>
                                        if (!(Model.RequestAssignment.TechnicalStatus == ReviewerRequestStatus.Pending))
                                        {
                                            <div class="row form-group">
                                                <div class="col-md-12">
                                                    <label>Comment</label>
                                                    <div><span>@Model.RequestResponse.TechnicalComment</span></div>
                                                </div>
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <div class="row form-group">
                                            <div class="col-md-12 text-center">
                                                <label class="label label-primary">Not Assigned</label>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row form-group">

                <div class="col-md-12">
                    <div class="section-col-box-noheight">

                        <div class="row form-group">
                            <div class="col-md-12">
                                @*<label>
                                    <span class="chk_box radio_radius">@Html.RadioButtonFor(m => m.RequestResponse.ArchitectResponse, Convert.ToInt16(ReviewerResponse.Eligible), new { @class = "request_chk" })</span>
                                    <span class="radio_txt">Eligible</span>
                                    </label>

                                    <label>
                                    <span class="chk_box radio_radius">@Html.RadioButtonFor(m => m.RequestResponse.ArchitectResponse, Convert.ToInt16(ReviewerResponse.NotEligible), new { @class = "request_chk" })</span>
                                    <span class="radio_txt">Not Eligible</span>
                                    </label>*@

                                <label>
                                    <span class="chk_box">@Html.CheckBoxFor(m => IsReqAddInfo, new { @class = "request_chk" })</span>
                                    <span class="chk_txt">Request Additional Information</span>
                                </label>
                                <br />

                                @*@Html.ValidationMessageFor(m => m.RequestResponse.ArchitectResponse, "", new { @class = "text-danger" })*@
                            </div>
                        </div>

                        <div class="row form-group">
                            <div class="col-md-12">
                                @Html.LabelFor(m => m.RequestResponse.ArchitectComment)
                                @Html.TextAreaFor(m => m.RequestResponse.ArchitectComment, 7, 0, new { @class = "form-control ArchitectComment", @onkeyup = "textCounter('ArchitectComment','architectCounter',500);" })
                                <div style="float:right">
                                    <span> Characters Remaining: </span><span id="architectCounter">500</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-9">
                </div>

                <div class="col-md-3 text-right">
                    <a href="~/Admin/Index" class="btn btn-default">Cancel</a>
                    @if (Model.IsRequestAssignedAlready == true)
                    {
                        <button onclick="return checkAssignValidations()" type="submit" class="btn btn-info">Re Assign</button>
                    }
                    else
                    {
                        <button onclick="return checkAssignValidations()" type="submit" class="btn btn-info">Save</button>
                    }
                </div>
            </div>
        }
    </div>
</div>

<div class="modal fade" id="correspondenceModal" role="dialog">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <div class="row">
                    <div class="col-md-6">
                        Correspondence
                    </div>

                    <div class="col-md-6">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                    </div>
                </div>
            </div>
            <div class="modal-body">
                <div class="row form-horizontal">
                    <div class="col-md-12">
                        <input type="hidden" id="correspondenceId" />

                        <div class="row form-group">
                            <div class="col-md-6">
                                @Html.DropDownListFor(m => m.CorrespondenceTypeId, new SelectList(Model.CorrespondenceTypes, "Value", "Text"), "Correspondence Type", new { @class = "form-control" })
                                <span id="correspondenceTypeValidation" class="field-validation-valid text-danger" style="display:none">The Correspondence Type field is required.</span>
                            </div>

                            <div class="col-md-6">
                            </div>
                        </div>

                        <div class="row form-group">
                            <div class="col-md-12">
                                <label>Letter Body</label><br />
                                @*<textarea id="letterBody" class="form-control" rows="14"></textarea><br />
                                    <div id="editor" class="editor-table"></div>*@
                                <textarea name="letterBody"></textarea>
                                <span id="letterBodyValidation" class="field-validation-valid text-danger" style="display:none">The Letter Body field is required.</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" id="addCorrespondenceBtn" class="btn btn-primary" onclick="saveCorrespondence()">Save</button>
                <button type="button" id="updateCorrespondenceBtn" class="btn btn-primary" onclick="updateCorrespondence()">Update</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="correspondenceViewModal" role="dialog">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <div class="row">
                    <div class="col-md-6">
                        Correspondence
                    </div>
                    <div class="col-md-6">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                    </div>
                </div>
            </div>
            <div class="modal-body">
                <div class="row form-horizontal">
                    <div class="col-md-12">
                        <img id="pdfModalImg" src="/Attachments/32_agency.png" style="width:100%">
                        <object type="application/pdf" id="pdfModalObj" data="" width="100%" height="500" style="height: 85vh;">No Support</object>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="viewModal" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <div class="row">
                    <div class="col-md-6">
                        File
                    </div>

                    <div class="col-md-6">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                    </div>
                </div>
            </div>

            <div class="modal-body">
                <div class="row form-horizontal">
                    <div class="col-md-12">
                        <img id="imgFile" src="" width="570" />
                        <object type="application/pdf" id="pdfFile" data="" width="100%" height="400">No Support</object>
                        <object id="docFile" data="">No Support</object>
                    </div>
                </div>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<div class="coverPage" style="display:none" id="coverPage"></div>
<style type="text/css">
    .control-label {
        text-align: left !important;
    }
</style>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="https://cdn.ckeditor.com/4.7.2/standard/ckeditor.js"></script>
<script>
    CKEDITOR.replace('letterBody');
</script>

<script type="text/javascript">

    var attachments = [];
    var correspondenceList = [];

    $(document).ready(function () {

        // Masking
        $('#Longitude').mask("-99.999999");
        $('#Latitude').mask("99.999999");

        $('#ProjectZip').mask("99999");
        $('#SubmittingContact_Zip').mask("99999");
        $('#SubmittingContact_Fax').mask("(999) 999-9999");
        $('#SubmittingContact_MobileNumber').mask("(999) 999-9999");
        $('#SubmittingContact_OfficeNumber').mask("(999) 999-9999");

        $('#ApplicantContact_Zip').mask("99999");
        $('#ApplicantContact_Fax').mask("(999) 999-9999");
        $('#ApplicantContact_MobileNumber').mask("(999) 999-9999");
        $('#ApplicantContact_OfficeNumber').mask("(999) 999-9999");

        $('#CorrespondenceTypeId').change(function () {
            var correspondenceTypeId =this.value;
            if(correspondenceTypeId!="" &&correspondenceTypeId!="0"){
                $.ajax({
                    url:'@Url.Action("GetCorrespondenceTypeById","Admin")',
                    data:{'CorrespondenceTypeId':correspondenceTypeId},
                    type:'Get',
                    success:function (data) {
                        CKEDITOR.instances.letterBody.setData(data.Template);
                    },
                    error:function (data) {
                    },
                });
            }
            else{
                CKEDITOR.instances.letterBody.setData('');
            }
        });



        var dbAttachments = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Attachments));
        var dbCorrespondence = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.CorrespondenceList));

        for (var i = 0; i < dbAttachments.length; i++) {
            var attachment = { 'IsNew':false, 'Id': dbAttachments[i].AttachmentId, 'Name': dbAttachments[i].Name, 'Type': dbAttachments[i].Type, 'Comment': dbAttachments[i].Comment }
            attachments.push(attachment);
        }

        for (var i = 0; i < dbCorrespondence.length; i++) {
            var correspondence = ({ 'CorrespondenceId':dbCorrespondence[i].CorrespondenceId, 'CorrespondenceTypeId':dbCorrespondence[i].CorrespondenceTypeId,'CorrespondenceType':dbCorrespondence[i].CorrespondenceTypeName,'Date':dbCorrespondence[i].Date, 'Body':dbCorrespondence[i].Body });
            correspondenceList.push(correspondence);
        }

        updateAttachmentList();
        updateCorrespondenceList();
        hideShowOtherDescription();

        var isRequestAssignedAlready = '@Model.IsRequestAssignedAlready'

        if (isRequestAssignedAlready != "True") {
            setRespondDate();
        }
        else{
            setAssignedBox();
        }

        $("#RequestAssignment_IsAssignToLandMarks").click(function()
        {
            
            var checked=$(this).is(":checked");
            if(checked)
            {
                $("#RequestAssignment_IsAssignToArchitect").prop('checked', false);
                $("#RequestAssignment_IsAssignToArchaelogical").prop('checked', false);
                $("#RequestAssignment_IsAssignToTechnical").prop('checked', false);
            }

        });
        $("#RequestAssignment_IsAssignToArchitect,#RequestAssignment_IsAssignToArchaelogical,#RequestAssignment_IsAssignToTechnical").click(function()
        {
            debugger;
            var checked=$(this).is(":checked");
            if(checked)
            {
                $("#RequestAssignment_IsAssignToLandMarks").prop('checked', false);
            }

        });
    });

    function hideShowOtherDescription() {
        if ($("#IsOther").is(":checked")) {
            $(".otherDesc").show();
        }
        else {
            $(".otherDesc").hide();
        }
    }

    function setRespondDate() {
        if ($(".acceptAndBegin").is(':checked')) {

            var todayDate = new Date();
            todayDate.setDate(todayDate.getDate() + 30);

            var dd = todayDate.getDate();
            var mm = todayDate.getMonth() + 1;
            var yyyy = todayDate.getFullYear();

            $(".respondDate").val(yyyy + "-" + (mm <= 9 ? "0" + mm : mm) + "-" + (dd <= 9 ? "0" + dd : dd));

            $(".federalOrState").attr('disabled',false);
            $(".assign_projectNumber").attr('disabled',false);
            $(".respondDate").attr('disabled',false);
            $(".isAssignToArchitect").attr('disabled',false);
            $(".isAssignToArchaelogical").attr('disabled',false);
            $(".isAssignToTechnical").attr('disabled',false);
        }
        else{
            $(".federalOrState").attr({'disabled':true,'checked':false});
            $(".assign_projectNumber").val('').attr('disabled',true);
            $(".respondDate").val('').attr('disabled',true);
            $(".isAssignToArchitect").attr({'disabled':true,'checked':false});
            $(".isAssignToArchaelogical").attr({'disabled':true,'checked':false});
            $(".isAssignToTechnical").attr({'disabled':true,'checked':false});
        }
    }

    function setAssignedBox() {
        $(".acceptAndBegin").attr('checked',true);
        var dateStr = '@respondDateStr'
        $(".respondDate").val(dateStr);
        $(".acceptAndBegin").attr('disabled',true);
        $(".federalOrState").attr('disabled',true);
        $(".assign_projectNumber").attr('disabled',true);
        $(".respondDate").attr('disabled',true);
        $(".isAssignToArchitect").attr('disabled',true);
        $(".isAssignToArchaelogical").attr('disabled',true);
        $(".isAssignToTechnical").attr('disabled',true);
    }

    function checkAssignValidations(){
        if ($(".acceptAndBegin").is(':checked')){
            var isAssignToArchitect = $(".isAssignToArchitect").is(":checked");
            var isAssignToArchaelogical = $(".isAssignToArchaelogical").is(":checked");
            var isAssignToTechnical = $(".isAssignToTechnical").is(":checked");
            if (isAssignToArchitect || isAssignToArchaelogical || isAssignToTechnical) {
                return true;
            }
            else{
                toastr.error('Please assign request to reviewers.');
                return false;
            }
        }
        return true;
    }

    function updateAttachmentList() {
        var filesHtml = '';

        if (attachments.length > 0) {
            for (var i = 0; i < attachments.length; i++) {
                filesHtml += '<tr><td>';
                filesHtml += attachments[i].Type;
                filesHtml += '</td><td>';
                filesHtml += attachments[i].Name;
                filesHtml += '</td><td>';
                filesHtml += attachments[i].Comment;
                filesHtml += '</td><td><button type="button" onclick="viewAttachment(\''+@Model.RequestId+'_'+attachments[i].Name+'\')" class="btn btn-primary btn-xs"><i class="fa fa-search"></i> View Attachment</button>';
                //filesHtml += '</td><td><button type="button" class="btn btn-primary btn-xs"><i class="fa fa-search"></i> View</button>';
                filesHtml += '</td></tr>';
            }
        }
        else{
            filesHtml += '<tr class="text-center"><td colspan="4"><span style="font-size:20px;">No attachment found for this request.</span></td></tr>';
        }

        $("#attachmentBody").html(filesHtml);
    }

    function showCorrespondenceModal() {

        $("#CorrespondenceTypeId").val('');
        CKEDITOR.instances.letterBody.setData('');

        $("#letterBodyValidation").hide();
        $("#correspondenceTypeValidation").hide();

        $("#updateCorrespondenceBtn").hide();
        $("#addCorrespondenceBtn").show();

        $("#correspondenceModal").modal('show');
    }

    function updateCorrespondenceList() {
        var correspondenceHtml = '';

        if (correspondenceList.length > 0) {
            for (var i = 0; i < correspondenceList.length; i++) {
                correspondenceHtml += '<tr><td>';
                correspondenceHtml += correspondenceList[i].CorrespondenceType;
                correspondenceHtml += '</td><td>';
                correspondenceHtml += correspondenceList[i].Date;
                //correspondenceHtml += '</td><td><button type="button" class="btn btn-primary btn-xs" onclick="viewCorrespondence('+correspondenceList[i].CorrespondenceId+')" ><i class="fa fa-search"></i></button> <button type="button" class="btn btn-primary btn-xs" onclick="editCorrespondence('+correspondenceList[i].CorrespondenceId+')"><i class="fa fa-pencil"></i></button>  <button type="button" onclick="deleteCorrespondence('+correspondenceList[i].CorrespondenceId+')" class="btn btn-danger btn-xs"><i class="fa fa-close"></i></button>';
                correspondenceHtml += '</td><td><button type="button" class="btn btn-primary btn-xs" onclick="editCorrespondence('+correspondenceList[i].CorrespondenceId+')"><i class="fa fa-pencil"></i></button>  <button type="button" onclick="deleteCorrespondence('+correspondenceList[i].CorrespondenceId+','+"'"+correspondenceList[i].CorrespondenceType+"'"+')" class="btn btn-danger btn-xs"><i class="fa fa-close"></i></button>';
                correspondenceHtml += '</td></tr>';
            }
        }
        else{
            correspondenceHtml += '<tr class="text-center"><td colspan="4"><span style="font-size:20px;">No correspondence found for this request.</span></td></tr>';
        }
        $("#correspondenceBody").html(correspondenceHtml);
    }

    function saveCorrespondence() {
        var correspondenceTypeId = $("#CorrespondenceTypeId").val();
        var correspondenceType = $("#CorrespondenceTypeId option:selected").text();
        var htmlBody = "";
        htmlBody = CKEDITOR.instances.letterBody.getData();
        var plainBody=htmlBody.replace(/<\/?[^>]+(>|$)/g, "").replace("&nbsp;"," ");

        var todayDate = new Date();
        var dd = todayDate.getDate();
        var mm = todayDate.getMonth() + 1;
        var yyyy = todayDate.getFullYear();

        todayDate = (mm <= 9 ? "0" + mm : mm)  + "/" + (dd <= 9 ? "0" + dd : dd) + "/" + yyyy;

        if (correspondenceTypeId == '') {
            $("#correspondenceTypeValidation").show();
            return false;
        }
        $("#correspondenceTypeValidation").hide();
        if (plainBody == '') {
            $("#letterBodyValidation").show();
            return false;
        }
        $("#letterBodyValidation").hide();

        var letterBodyLength = plainBody.length;
        if (letterBodyLength > 2000) {
            toastr.error("Letter body must have maximum length of '2000'.");
            return false;
        }

        var correspondence = ({ '0':0, 'CorrespondenceTypeId':correspondenceTypeId,'CorrespondenceType':correspondenceType,'Date':todayDate, 'Body':htmlBody,'PlainBody':plainBody });
        //correspondenceList.push(correspondence);

        $.ajax({
            url:'/Admin/SaveCorrespondence',
            //url:'@Url.Action("SaveCorrespondence", "Admin")',
            type:'Post',
            //contentType: "application/json; charset=utf-8" ,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8", // this is the default value, so it's optional
            dataType: "json",
            data:{model: correspondence,RequestId:'@Model.RequestId'},
            success:function (correspondenceId) {

                if (correspondenceId > 0) {
                    var newCorrespondence = ({ 'CorrespondenceId':correspondenceId, 'CorrespondenceTypeId':correspondenceTypeId,'CorrespondenceType':correspondenceType,'Date':todayDate, 'Body':htmlBody,'PlainBody':plainBody });
                    correspondenceList.push(newCorrespondence);
                    updateCorrespondenceList();
                    var record = correspondenceList.filter(function (p) {
                        return p.CorrespondenceId == 0;
                    })[0];

                    // record.CorrespondenceId = correspondenceId;
                    toastr.success('Correspondence saved successfully.');

                    $("#correspondenceModal").modal('hide');
                }
            },
            error:function (data) {

            }
        })
    }

    function viewAttachment(attachment) {

        var ext = attachment.substr(attachment.lastIndexOf('.')+1).toLowerCase();
        if (ext == 'docx' || ext == 'doc' || ext == 'xlsx' || ext == 'xls'|| ext=='csv'||ext=='ods') {
            $("#imgFile").hide();
            $('#pdfFile').hide();
            $('#docFile').attr('data','/Attachments/'+attachment);
            $('#docFile').show();
            $("#viewModal").modal('show');
            $("#viewModal").modal('hide');
        }
        else if (ext == 'png' || ext == 'jpg' || ext == 'jpeg' || ext == 'gif') {
            $('#pdfFile').hide();
            $('#docFile').hide();
            $("#imgFile").attr('src',"/Attachments/"+attachment);
            $("#imgFile").show();
            $("#viewModal").modal('show');
        }
        else if (ext == 'pdf') {
            $("#imgFile").hide();
            $('#docFile').hide();
            $('#pdfFile').attr('data','/Attachments/'+attachment);
            $('#pdfFile').show();
            $("#viewModal").modal('show');
        }
    }

    function editCorrespondence(correspondenceId) {
        if (correspondenceId > 0) {

            $("#correspondenceId").val(correspondenceId);
            var record = correspondenceList.filter(function (p) {
                return p.CorrespondenceId == correspondenceId;
            })[0];

            $("#CorrespondenceTypeId").val(record.CorrespondenceTypeId);
            // $("#letterBody").val(record.Body);
            CKEDITOR.instances.letterBody.setData(record.Body);
            $("#letterBodyValidation").hide();
            $("#correspondenceTypeValidation").hide();

            $("#updateCorrespondenceBtn").show();
            $("#addCorrespondenceBtn").hide();

            $("#correspondenceModal").modal('show');
        }
    }


    function updateCorrespondence() {
        var correspondenceTypeId = $("#CorrespondenceTypeId").val();
        var correspondenceType = $("#CorrespondenceTypeId option:selected").text();
        var htmlBody = "";
        htmlBody = CKEDITOR.instances.letterBody.getData();
        var plainBody=htmlBody.replace(/<\/?[^>]+(>|$)/g, "").replace("&nbsp;"," ");

        var todayDate = new Date();
        var correspondenceId = $("#correspondenceId").val();

        var dd = todayDate.getDate();
        var mm = todayDate.getMonth() + 1;
        var yyyy = todayDate.getFullYear();

        todayDate = (mm <= 9 ? "0" + mm : mm)  + "/" + (dd <= 9 ? "0" + dd : dd) + "/" + yyyy;

        if (correspondenceTypeId == '') {
            $("#correspondenceTypeValidation").show();
            return false;
        }
        $("#correspondenceTypeValidation").hide();
        if (plainBody == '') {
            $("#letterBodyValidation").show();
            return false;
        }
        $("#letterBodyValidation").hide();

        var letterBodyLength = plainBody.length;
        if (letterBodyLength > 2000) {
            toastr.error("Letter body must have maximum length of '2000'.");
            return false;
        }

        var updateCorrespondence = ({ 'CorrespondenceId':correspondenceId, 'CorrespondenceTypeId':correspondenceTypeId,'CorrespondenceType':correspondenceType,'Date':todayDate, 'Body':htmlBody,'PlainBody':plainBody  });

        $.ajax({
            url:'@Url.Action("UpdateCorrespondence", "Admin")',
            type:'Post',
            data:{model:updateCorrespondence,RequestId:'@Model.RequestId'},
            success:function (res) {
                if (res) {
                    var record = correspondenceList.filter(function (p) {
                        return p.CorrespondenceId == correspondenceId;
                    })[0];
                    record.CorrespondenceTypeId = correspondenceTypeId;
                    record.CorrespondenceType = correspondenceType;
                    record.Date = todayDate;
                    record.Body = htmlBody;

                    toastr.success('Correspondence updated successfully.');
                    updateCorrespondenceList();
                    $("#correspondenceModal").modal('hide');
                }
            }
        })
    }
    function  printForm(){
        window.print()
    }

    function deleteCorrespondence(correspondenceId, correspondenceType) {
        bootbox.confirm({
            message: "Are you sure you want to delete this correspondence?",
            title: "Delete Correspondence",
            buttons: {
                confirm: {
                    label: '<i class="fa fa-check"></i> Yes',
                    className: 'btn-success'
                },
                cancel: {
                    label: '<i class="fa fa-times"></i> No',
                    className: 'btn-danger'
                }
            },
            callback: function (result) {
                if (result) {
                    $.ajax({
                        //url:'/Admin/DeleteCorrespondence',
                        url:'@Url.Action("DeleteCorrespondence", "Admin")',
                        type:'Get',
                        data:{ correspondenceId:correspondenceId,correspondenceType:correspondenceType, RequestId : '@Model.RequestId' },
                        success:function (res) {
                            if (res) {
                                var record = correspondenceList.filter(function (p) {
                                    p.CorrespondenceId == correspondenceId;
                                })[0];
                                var indexOf = correspondenceList.indexOf(record);
                                //correspondenceList.splice(indexOf,1);
                                correspondenceList = $.grep(correspondenceList, function (e) { return e.CorrespondenceId != correspondenceId });
                                toastr.success('Correspondence deleted successfully.');
                                updateCorrespondenceList();
                            }
                        }
                    })
                }
            }
        })
    }
    function CoverPage()
    {
        debugger;
        var requestID=$("#RequestId").val();
        $.ajax({
            url:'@Url.Action("CoverPagePdf", "Admin")',
            data:{requestID:requestID},
            type:'POST',
            success:function(data)
            {
                debugger;
                $(".coverPage").append(data);
                var newdata=$("#coverPage").html();
                setTimeout(function(){

                    var mywindow = window.open("about:blank", "_blank");
                    mywindow.document.write('<html><head><title>Print Window</title>');
                    mywindow.document.write('</head><body >');
                    mywindow.document.write(data);
                    mywindow.document.write('</body></html>');
                    mywindow.document.close();
                    mywindow.print();
                },200);

            },
            error:
            {

            }



        })




    }

</script>